"use client";

import { useState, type FormEvent } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Label } from '@/components/ui/label';
import { Loader2, Zap, MessageSquarePlus } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

// Placeholder for AI flow integration
// import { askDoubtFlow } from '@/ai/flows'; 

export default function AskPage() {
  const [doubt, setDoubt] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [aiResponse, setAiResponse] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (!doubt.trim()) {
      setError("Please enter your doubt before submitting.");
      return;
    }
    setIsLoading(true);
    setAiResponse(null);
    setError(null);

    try {
      // Simulate AI call
      await new Promise(resolve => setTimeout(resolve, 1500));
      // Replace with actual AI call:
      // const response = await askDoubtFlow({ doubt });
      // setAiResponse(response.answer);
      setAiResponse(`This is a simulated AI response to your doubt: "${doubt}". In a real application, this would be generated by an AI model. The model would try to explain the concept clearly and concisely.`);
    } catch (e) {
      console.error("Error fetching AI response:", e);
      setError("Sorry, something went wrong while getting your answer. Please try again.");
      setAiResponse(null);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8 flex justify-center">
      <Card className="w-full max-w-2xl shadow-xl">
        <CardHeader>
          <CardTitle className="text-2xl font-headline flex items-center gap-2">
            <MessageSquarePlus className="h-6 w-6 text-primary" />
            Ask Your Doubt
          </CardTitle>
          <CardDescription>
            Type your question below, and our AI assistant will help you out!
          </CardDescription>
        </CardHeader>
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="doubt-input" className="text-md mb-2 block">Your Question:</Label>
              <Textarea
                id="doubt-input"
                placeholder="E.g., What is photosynthesis? or How does a black hole form?"
                value={doubt}
                onChange={(e) => setDoubt(e.target.value)}
                rows={5}
                className="resize-none focus:ring-accent focus:border-accent"
                disabled={isLoading}
              />
            </div>
            {error && (
              <Alert variant="destructive">
                <AlertTitle>Error</AlertTitle>
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
          </CardContent>
          <CardFooter>
            <Button type="submit" className="w-full transition-transform duration-150 ease-in-out hover:scale-105 active:scale-95" disabled={isLoading}>
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Getting Answer...
                </>
              ) : (
                <>
                  <Zap className="mr-2 h-4 w-4" />
                  Ask AI
                </>
              )}
            </Button>
          </CardFooter>
        </form>
        {aiResponse && (
          <CardContent className="mt-6 border-t pt-6">
            <h3 className="text-xl font-headline mb-2">AI's Answer:</h3>
            <div className="prose prose-sm max-w-none p-4 bg-secondary/50 rounded-md">
              <p>{aiResponse}</p>
            </div>
          </CardContent>
        )}
      </Card>
    </div>
  );
}
